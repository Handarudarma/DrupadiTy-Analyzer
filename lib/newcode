import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart';
import 'login_page.dart';
import 'register_page.dart';
import 'dart:async'; // ⬅️ Untuk Timer

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(SecurityAnalyzeApp());
}

class SecurityAnalyzeApp extends StatefulWidget {
  @override
  _SecurityAnalyzeAppState createState() => _SecurityAnalyzeAppState();
}

class _SecurityAnalyzeAppState extends State<SecurityAnalyzeApp> {
  bool isDarkMode = true;

  void toggleTheme() {
    setState(() {
      isDarkMode = !isDarkMode;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Security Analyze By Drupadity',
      debugShowCheckedModeBanner: false,
      theme: isDarkMode
          ? ThemeData.dark().copyWith(
              primaryColor: Colors.teal,
              scaffoldBackgroundColor: Colors.black,
            )
          : ThemeData.light().copyWith(
              primaryColor: Colors.green,
              scaffoldBackgroundColor: Colors.white,
            ),
      initialRoute: '/',
      routes: {
        '/': (context) => SplashScreen(toggleTheme: toggleTheme, isDarkMode: isDarkMode), // ⬅️ Splash screen di sini
        '/login': (context) => const LoginPage(),
        '/register': (context) => const RegisterPage(),
        '/home': (context) => HomePage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
        '/profile': (context) => ProfilePage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
        '/setting': (context) => SettingPage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
        '/about': (context) => AboutPage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
        '/history': (context) => HistoryPage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
      },
    );
  }
}

// ✅ Splash Screen Class
class SplashScreen extends StatefulWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  const SplashScreen({super.key, required this.toggleTheme, required this.isDarkMode});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 3), () {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        Navigator.pushReplacementNamed(context, '/home');
      } else {
        Navigator.pushReplacementNamed(context, '/login');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFA8FF9A),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset('assets/images/logo.jpg', height: 150),
            const SizedBox(height: 20),
            const Text(
              'DrupadiTy',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.indigo,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ✅ AuthGate dan AppDrawer (tidak diubah)
class AuthGate extends StatelessWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  const AuthGate({required this.toggleTheme, required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        } else if (snapshot.hasData) {
          return HomePage(toggleTheme: toggleTheme, isDarkMode: isDarkMode);
        } else {
          return const LoginPage();
        }
      },
    );
  }
}

class AppDrawer extends StatelessWidget {
  final String currentPage;
  final bool isDarkMode;
  final VoidCallback toggleTheme;

  const AppDrawer({
    required this.currentPage,
    required this.isDarkMode,
    required this.toggleTheme,
  });

  @override
  Widget build(BuildContext context) {
    Color bgColor = isDarkMode ? Colors.black : Colors.white;
    Color textColor = isDarkMode ? Colors.white : Colors.black;
    Color iconColor = isDarkMode ? Colors.white : Colors.black;

    return Drawer(
      child: Container(
        color: bgColor,
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: const BoxDecoration(color: Colors.teal),
              child: Column(
                children: [
                  const CircleAvatar(radius: 24, child: Icon(Icons.person)),
                  const SizedBox(height: 8),
                  Text(
                    FirebaseAuth.instance.currentUser?.displayName ?? 'Guest User',
                    style: const TextStyle(color: Colors.white),
                  ),
                ],
              ),
            ),
            ListTile(
              leading: Icon(Icons.home, color: iconColor),
              title: Text('Home', style: TextStyle(color: textColor)),
              selected: currentPage == 'home',
              onTap: () {
                Navigator.pushReplacementNamed(context, '/home');
              },
            ),
            ListTile(
              leading: Icon(Icons.history, color: iconColor),
              title: Text('History', style: TextStyle(color: textColor)),
              selected: currentPage == 'history',
              onTap: () {
                Navigator.pushReplacementNamed(context, '/history');
              },
            ),
            ListTile(
              leading: Icon(Icons.info, color: iconColor),
              title: Text('About', style: TextStyle(color: textColor)),
              selected: currentPage == 'about',
              onTap: () {
                Navigator.pushReplacementNamed(context, '/about');
              },
            ),
            ListTile(
              leading: Icon(Icons.settings, color: iconColor),
              title: Text('Setting', style: TextStyle(color: textColor)),
              selected: currentPage == 'setting',
              onTap: () {
                Navigator.pushReplacementNamed(context, '/setting');
              },
            ),
            ListTile(
              leading: Icon(Icons.person, color: iconColor),
              title: Text('Profil', style: TextStyle(color: textColor)),
              selected: currentPage == 'profile',
              onTap: () {
                Navigator.pushReplacementNamed(context, '/profile');
              },
            ),
            ListTile(
              leading: Icon(Icons.logout, color: iconColor),
              title: Text('Logout', style: TextStyle(color: textColor)),
              onTap: () async {
                await FirebaseAuth.instance.signOut();
                Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
              },
            ),
          ],
        ),
      ),
    );
  }
}

//logo//
class ProfilePage extends StatefulWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  const ProfilePage({
    Key? key,
    required this.toggleTheme,
    required this.isDarkMode,
  }) : super(key: key);

  @override
  _ProfilePageState createState() => _ProfilePageState();
}
class _ProfilePageState extends State<ProfilePage> {
  final user = FirebaseAuth.instance.currentUser;
  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _noHpController;
  String _selectedNegara = 'Indonesia';

  @override
  void initState() {
    super.initState();
    _nameController =
        TextEditingController(text: user?.displayName ?? 'Nama tidak tersedia');
    _emailController =
        TextEditingController(text: user?.email ?? 'Email tidak tersedia');
    _noHpController = TextEditingController(text: '+62 812-3456-7890');
    _selectedNegara = 'Indonesia';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Profil')),
      drawer: AppDrawer(
        currentPage: 'profile',
        toggleTheme: widget.toggleTheme,
        isDarkMode: widget.isDarkMode,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            const CircleAvatar(radius: 50, child: Icon(Icons.person, size: 50)),
            const SizedBox(height: 16),
            const Text('Profil', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            const SizedBox(height: 24),
            TextField(
              controller: _nameController,
              readOnly: true,
              decoration: const InputDecoration(labelText: 'Nama'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _emailController,
              readOnly: true,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _noHpController,
              readOnly: true,
              decoration: const InputDecoration(labelText: 'Nomor HP'),
              keyboardType: TextInputType.phone,
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<String>(
              value: _selectedNegara,
              items: ['Indonesia', 'Malaysia', 'Singapura']
                  .map((n) => DropdownMenuItem(value: n, child: Text(n)))
                  .toList(),
              onChanged: null,
              decoration: const InputDecoration(labelText: 'Negara'),
              disabledHint: Text(_selectedNegara),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () async {
                final result = await Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => EditProfilePage(
                      toggleTheme: widget.toggleTheme,
                      isDarkMode: widget.isDarkMode,
                      initialName: _nameController.text,
                      initialEmail: _emailController.text,
                      initialNoHp: _noHpController.text,
                      initialNegara: _selectedNegara,
                    ),
                  ),
                );

                if (result != null && mounted) {
                  setState(() {
                    _nameController.text = result['name'];
                    _emailController.text = result['email'];
                    _noHpController.text = result['noHp'];
                    _selectedNegara = result['negara'];
                  });
                }
              },
              child: const Text('Edit Profil'),
            ),
            const SizedBox(height: 16),
            const Text('@Security Analyze By Drupadity',
                style: TextStyle(fontSize: 12, color: Colors.grey)),
          ],
        ),
      ),
    );
  }
}
//proil end

//edit profil
class EditProfilePage extends StatefulWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;
  final String initialName;
  final String initialEmail;
  final String initialNoHp;
  final String initialNegara;

  const EditProfilePage({
    super.key,
    required this.toggleTheme,
    required this.isDarkMode,
    required this.initialName,
    required this.initialEmail,
    required this.initialNoHp,
    required this.initialNegara,
  });

  @override
  State<EditProfilePage> createState() => _EditProfilePageState();
}

class _EditProfilePageState extends State<EditProfilePage> {
  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _noHpController;
  String _selectedNegara = 'Indonesia';
  bool _obscurePassword = true;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.initialName);
    _emailController = TextEditingController(text: widget.initialEmail);
    _noHpController = TextEditingController(text: widget.initialNoHp);
    _selectedNegara = widget.initialNegara;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Edit Profil')),
      drawer: AppDrawer(currentPage: 'edit_profile', toggleTheme: widget.toggleTheme, isDarkMode: widget.isDarkMode),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            const CircleAvatar(radius: 50, child: Icon(Icons.person, size: 50)),
            const SizedBox(height: 16),
            const Text('Edit Profil', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            const SizedBox(height: 24),
            TextField(controller: _nameController, decoration: const InputDecoration(labelText: 'Nama')),
            const SizedBox(height: 12),
            TextField(controller: _emailController, decoration: const InputDecoration(labelText: 'Email')),
            const SizedBox(height: 12),
            TextField(
              obscureText: _obscurePassword,
              decoration: InputDecoration(
                labelText: 'Password',
                suffixIcon: IconButton(
                  icon: Icon(_obscurePassword ? Icons.visibility : Icons.visibility_off),
                  onPressed: () => setState(() => _obscurePassword = !_obscurePassword),
                ),
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _noHpController,
              decoration: const InputDecoration(labelText: 'Nomor HP'),
              keyboardType: TextInputType.phone,
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<String>(
              value: _selectedNegara,
              items: ['Indonesia', 'Malaysia', 'Singapura']
                  .map((n) => DropdownMenuItem(value: n, child: Text(n)))
                  .toList(),
              onChanged: (val) => setState(() => _selectedNegara = val!),
              decoration: const InputDecoration(labelText: 'Negara'),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: const Text('Simpan'),
            ),
            const SizedBox(height: 16),
            const Text('@Security Analyze By Drupadity', style: TextStyle(fontSize: 12, color: Colors.grey)),
          ],
        ),
      ),
    );
  }
}
//sampai sini dulu


class HomePage extends StatelessWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  HomePage({required this.toggleTheme, required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;
    Color iconColor = isDarkMode ? Colors.greenAccent : Colors.green;

    return Scaffold(
      drawer: AppDrawer(currentPage: 'home', isDarkMode: isDarkMode, toggleTheme: toggleTheme),
      appBar: AppBar(
        title: Text('Home'),
        backgroundColor: isDarkMode ? Colors.teal : Colors.green,
        actions: [
          IconButton(
            icon: Icon(isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: toggleTheme,
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.android, size: 100, color: iconColor),
            SizedBox(height: 20),
            Text('Only APK', style: TextStyle(color: textColor, fontSize: 24)),
            SizedBox(height: 20),
            ElevatedButton.icon(
              icon: Icon(Icons.upload_file),
              label: Text('Upload & Analyze'),
              style: ElevatedButton.styleFrom(
                backgroundColor: isDarkMode ? Colors.white : Colors.black,
                foregroundColor: isDarkMode ? Colors.black : Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => ResultPage(toggleTheme: toggleTheme, isDarkMode: isDarkMode),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}

class ResultPage extends StatefulWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  ResultPage({required this.toggleTheme, required this.isDarkMode});

  @override
  _ResultPageState createState() => _ResultPageState();
}

class _ResultPageState extends State<ResultPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;

  final List<Tab> myTabs = <Tab>[
    Tab(text: 'Info'),
    Tab(text: 'Signer'),
    Tab(text: 'Perm'),
    Tab(text: 'AMAPI'),
    Tab(text: 'Malware'),
  ];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: myTabs.length, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Widget buildTabContent(int index) {
    switch (index) {
      case 0:
        return InfoPage(isDarkMode: widget.isDarkMode);
      case 1:
        return SignerPage(isDarkMode: widget.isDarkMode);
      case 2:
        return PermissionPage(isDarkMode: widget.isDarkMode);
      case 3:
        return AmApiPage(isDarkMode: widget.isDarkMode);
      case 4:
        return MalwarePage(isDarkMode: widget.isDarkMode);
      default:
        return Center(child: Text('Tab tidak ditemukan'));
    }
  }

  @override
  Widget build(BuildContext context) {
    Color tabBarBg = widget.isDarkMode ? Colors.grey[900]! : Colors.grey[300]!;
    Color indicatorColor = widget.isDarkMode ? Colors.tealAccent : Colors.green;

    return Scaffold(
      drawer: AppDrawer(currentPage: 'result', isDarkMode: widget.isDarkMode, toggleTheme: widget.toggleTheme),
      appBar: AppBar(
        title: Text('Analysis Results'),
        backgroundColor: widget.isDarkMode ? Colors.teal : Colors.green,
        bottom: PreferredSize(
          preferredSize: Size.fromHeight(kToolbarHeight),
          child: Container(
            color: tabBarBg,
            child: TabBar(
              controller: _tabController,
              tabs: myTabs,
              indicatorColor: indicatorColor,
              labelColor: widget.isDarkMode ? Colors.white : Colors.black,
              unselectedLabelColor: widget.isDarkMode ? Colors.grey[400] : Colors.grey[700],
            ),
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(widget.isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: widget.toggleTheme,
          ),
        ],
      ),
      body: TabBarView(
        controller: _tabController,
        children: List.generate(myTabs.length, (index) => buildTabContent(index)),
      ),
    );
  }
}

// Contoh halaman Info
class InfoPage extends StatelessWidget {
  final bool isDarkMode;
  InfoPage({required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    Row(
                      children: const [
                        Icon(Icons.verified, color: Colors.green, size: 30),
                        SizedBox(width: 10),
                        Text("APP", style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Row(
                      children: [
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: const [
                              Text("Security Score", style: TextStyle(fontWeight: FontWeight.bold)),
                              SizedBox(height: 4),
                              Text("50/100", style: TextStyle(color: Colors.orange, fontSize: 20)),
                              SizedBox(height: 10),
                              Text("Trackers Detection", style: TextStyle(fontWeight: FontWeight.bold)),
                              SizedBox(height: 4),
                              Text("5/432", style: TextStyle(color: Colors.red)),
                            ],
                          ),
                        ),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: const [
                              Text("FILE INFORMATION", style: TextStyle(fontWeight: FontWeight.bold)),
                              SizedBox(height: 4),
                              Text("File Name: Malware_Apk"),
                              Text("Size: 50.49MB"),
                              Text("MD5: 73243JKERWHF9"),
                              Text("SHA1: 53U543KF3485783"),
                            ],
                          ),
                        ),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: const [
                              Text("APP INFORMATION", style: TextStyle(fontWeight: FontWeight.bold)),
                              SizedBox(height: 4),
                              Text("File Name: Malware"),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    const Divider(),
                    const SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: const [
                        Column(
                          children: [
                            Text("Detection Result"),
                            Text("✔ Clean", style: TextStyle(color: Colors.green)),
                          ],
                        ),
                        Column(
                          children: [
                            Text("Community Score"),
                            Text("16/100", style: TextStyle(color: Colors.red)),
                          ],
                        ),
                      ],
                    )
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            Wrap(
              spacing: 16,
              runSpacing: 16,
              children: [
                _buildMetricCard("Security Score", "40/100", Colors.blue),
                _buildMetricCard("Risk Rating", "Grade B", Colors.yellow),
                _buildMetricCard("Security Distribution", "Pie Chart", Colors.orange),
                _buildMetricCard("Privacy Risk", "1 Tracker", Colors.red),
              ],
            ),
            const SizedBox(height: 20),
            Text(
              "@Security Analyze By Drupadity",
              style: TextStyle(color: Theme.of(context).textTheme.bodySmall?.color),
            ),
          ],
        ),
      ),
    );
  }

  static Widget _buildMetricCard(String title, String value, Color color) {
    return Container(
      width: 160,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color),
      ),
      child: Column(
        children: [
          Text(title, style: const TextStyle(fontWeight: FontWeight.bold)),
          const SizedBox(height: 10),
          Text(value, style: TextStyle(color: color, fontSize: 16)),
        ],
      ),
    );
  }
}

// Contoh halaman Signer
class SignerPage extends StatelessWidget {
  final bool isDarkMode;
  SignerPage({required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    return Container(
      color: isDarkMode ? Colors.black : Colors.white,
      padding: EdgeInsets.all(16),
      child: SingleChildScrollView(
        child: Text(
          '''Binary is signed v1
signature: False v2
signature: True v3
signature: False v4
signature: False
X.509 Subject: O=TAGpilot, CN=Maria Feiertag
Signature Algorithm: rsassa_pkcs1v15
Valid From: 2020-02-05 19:48:53+00:00
Valid To: 2045-01-29 19:48:53+00:00
Issuer: O=TAGpilot, CN=Maria Feiertag
Serial Number: 0x2a9cd888
Hash Algorithm: sha256
md5: 0f325ac233806098c906ac2052209734
sha1: e5e8ccbc3635d710035087b544033d1ddb85711e
sha256: e567b8a23e74ba6fd3c0bda4168fa0f4e3bbbdc64d4a0055af5993d9a4465f53
sha512: 8ccd8983a9c11d08d7b22d1c1131f99400c7b886e02cd34a3a8143d160808fe4
7b18eb8000c8da6bd2aea2f3dbe9c0b8a5ab12ee0aa557bb9d0838bf188cbb
PublicKey Algorithm: rsa
Bit Size: 2048
Fingerprint: faadac280d3cfc152b683b651d48acdef43170f7b9755bae5869b1b2dec6f878
Found 1 unique certificates''',
          style: TextStyle(
            color: isDarkMode ? Colors.white : Colors.black,
            fontFamily: 'Courier',
          ),
        ),
      ),
    );
  }
}

// Contoh halaman Permission
class PermissionPage extends StatelessWidget {
  final bool isDarkMode;
  PermissionPage({required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;
    return Container(
      color: isDarkMode ? Colors.black : Colors.white,
      padding: EdgeInsets.all(16),
      child: SingleChildScrollView(
        child: DataTable(
          columns: [
            DataColumn(label: Text('Status', style: TextStyle(color: textColor))),
            DataColumn(label: Text('Info', style: TextStyle(color: textColor))),
            DataColumn(label: Text('Deskripsi', style: TextStyle(color: textColor))),
          ],
          rows: [
            DataRow(cells: [
              DataCell(Text('Dangerous', style: TextStyle(color: Colors.red))),
              DataCell(Text('read/modify/delete external storage contents', style: TextStyle(color: textColor))),
              DataCell(Text('Allows app to access external storage', style: TextStyle(color: textColor))),
            ]),
            DataRow(cells: [
              DataCell(Text('Normal', style: TextStyle(color: Colors.green))),
              DataCell(Text('allow app to access the device advertising ID', style: TextStyle(color: textColor))),
              DataCell(Text('This ID is a unique, user-resettable identifier provided by Google’s advertising services.', style: TextStyle(color: textColor))),
            ]),
            DataRow(cells: [
              DataCell(Text('Unknown', style: TextStyle(color: Colors.orange))),
              DataCell(Text('', style: TextStyle(color: textColor))),
              DataCell(Text('', style: TextStyle(color: textColor))),
            ]),
            DataRow(cells: [
              DataCell(Text('Dangerous', style: TextStyle(color: Colors.red))),
              DataCell(Text('allows app to post notifications', style: TextStyle(color: textColor))),
              DataCell(Text('Allows an app to post notifications', style: TextStyle(color: textColor))),
            ]),
            DataRow(cells: [
              DataCell(Text('Normal', style: TextStyle(color: Colors.green))),
              DataCell(Text('allows use of alarm-supported biometric modalities', style: TextStyle(color: textColor))),
              DataCell(Text('', style: TextStyle(color: textColor))),
            ]),
          ],
        ),
      ),
    );
  }
}

// Contoh halaman AMAPI
class AmApiPage extends StatelessWidget {
  final bool isDarkMode;
  AmApiPage({required this.isDarkMode});

  final List<Map<String, String>> apiList = [
    {'api': 'Android Notifications'},
    {'api': 'Base64 Decode'},
    {'api': 'Dynamic Class and Dexloading'},
    {'api': 'Crypto'},
    {'api': 'Get Installed Applications'},
    {'api': 'Get Running App Processes'},
    {'api': 'Get System Service'},
    {'api': 'GPS Location'},
    {'api': 'GPS Location'},
    {'api': 'Base64 Encode'},
  ];

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;

    return Container(
      color: isDarkMode ? Colors.black : Colors.white,
      padding: const EdgeInsets.all(16),
      child: SingleChildScrollView(
        scrollDirection: Axis.vertical,
        child: DataTable(
          columns: [
            DataColumn(label: Text('API', style: TextStyle(color: textColor))),
            DataColumn(label: Text('Files', style: TextStyle(color: textColor))),
          ],
          rows: apiList.map((apiData) {
            return DataRow(cells: [
              DataCell(Text(apiData['api']!, style: TextStyle(color: textColor))),
              DataCell(TextButton(
                child: const Text('Show Files'),
                onPressed: () {
                  // Aksi saat tombol ditekan
                },
              )),
            ]);
          }).toList(),
        ),
      ),
    );
  }
}

// Contoh halaman Malware
class MalwarePage extends StatelessWidget {
  final bool isDarkMode;
  final VoidCallback? toggleTheme;

  MalwarePage({required this.isDarkMode, this.toggleTheme});
  final List<String> malwarePermissions = [
    'android.permission.WRITE_EXTERNAL_STORAGE',
    'android.permission.READ_EXTERNAL_STORAGE',
    'android.permission.READ_CONTACTS',
    'android.permission.ACCESS_NETWORK_STATE',
    'android.permission.WAKE_LOCK',
    'android.permission.CAMERA',
    'android.permission.READ_PHONE_STATE',
    'android.permission.ACCESS_WIFI_STATE',
    'android.permission.ACCESS_FINE_LOCATION',
    'android.permission.ACCESS_COARSE_LOCATION',
    'android.permission.INTERNET',
  ];

  final List<String> commonPermissions = [
    'com.google.android.gms.permission.AD_ID',
    'android.permission.FLASHLIGHT',
    'com.google.android.c2dm.permission.RECEIVE',
    'com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView(
        padding: const EdgeInsets.all(20),
        children: [
          // Malware Title
          Row(
            children: [
              Icon(Icons.warning, color: Colors.red, size: 36),
              SizedBox(width: 10),
              Text(
                'MALWARE',
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
            ],
          ),
          SizedBox(height: 16),

          // Malware Lookup Box
          Card(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            elevation: 3,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.block, size: 24),
                  SizedBox(height: 8),
                  Text(
                    'Malware Lookup',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 8),
                  Wrap(
                    spacing: 8,
                    children: [
                      reportChip('VirusTotal Report'),
                      reportChip('Triage Report'),
                      reportChip('MetaDefender Report'),
                      reportChip('Hybrid Analysis Report'),
                    ],
                  ),
                ],
              ),
            ),
          ),
          SizedBox(height: 16),

          // Abused Permissions Box
          Card(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            elevation: 3,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.bug_report_outlined),
                      SizedBox(width: 8),
                      Text(
                        'Abused Permissions',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16),
                  // Top Malware Permissions
                  Text(
                    'Top Malware Permissions',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 4),
                  LinearProgressIndicator(value: 11 / 25, color: Colors.red),
                  SizedBox(height: 8),
                  for (var perm in malwarePermissions)
                    Text(perm, style: TextStyle(fontSize: 13)),
                  Divider(),
                  // Other Common Permissions
                  Text(
                    'Other Common Permissions',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 4),
                  LinearProgressIndicator(value: 4 / 44, color: Colors.grey),
                  SizedBox(height: 8),
                  for (var perm in commonPermissions)
                    Text(perm, style: TextStyle(fontSize: 13)),
                ],
              ),
            ),
          ),
          SizedBox(height: 12),

          Text(
            'Malware Permissions are the top permissions that are widely abused by known malware.\n\n'
            'Other Common Permissions are permissions that are commonly abused by known malware.',
            style: TextStyle(fontSize: 12, color: Colors.black87),
          ),
          SizedBox(height: 20),

          Center(
            child: Text(
              '@Security Analyze By Drupadity',
              style: TextStyle(
                color: Colors.black54,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget navTab(String title, {bool isActive = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Text(
        title,
        style: TextStyle(
          color: isActive ? Colors.white : Colors.white70,
          fontWeight: isActive ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }

  Widget reportChip(String label) {
    return Chip(
      label: Text(label, style: TextStyle(fontSize: 12)),
      backgroundColor: Colors.blue.shade50,
      side: BorderSide(color: Colors.grey.shade400),
    );
  }
}

class HistoryPage extends StatelessWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  HistoryPage({required this.toggleTheme, required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;
    Color bgColor = isDarkMode ? Colors.black : Colors.white;

    // Contoh data history
    List<Map<String, String>> historyList = [
      {"name": "App ke-0", "date": "24 Apr 2025"},
      {"name": "App ke-1", "date": "24 Apr 2025"},
      {"name": "App ke-2", "date": "24 Apr 2025"},
    ];

    return Scaffold(
      drawer: AppDrawer(currentPage: 'history', isDarkMode: isDarkMode, toggleTheme: toggleTheme),
      appBar: AppBar(
        title: Text('Riwayat'),
        backgroundColor: isDarkMode ? Colors.teal : Colors.green,
        actions: [
          IconButton(
            icon: Icon(isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: toggleTheme,
          ),
        ],
      ),
      backgroundColor: bgColor,
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: historyList.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(
                    historyList[index]["name"]!,
                    style: TextStyle(color: textColor, fontWeight: FontWeight.w600),
                  ),
                  subtitle: Text(
                    'Dianalisis pada ${historyList[index]["date"]!}',
                    style: TextStyle(color: textColor.withOpacity(0.7)),
                  ),
                  trailing: Icon(Icons.arrow_forward_ios, color: textColor, size: 18),
                  onTap: () {
                    // Tambahkan aksi jika ingin menampilkan detail
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(bottom: 20),
            child: Text(
              '@Security Analyze By Drupadity',
              style: TextStyle(color: textColor.withOpacity(0.6), fontSize: 12),
            ),
          ),
        ],
      ),
    );
  }
}


// About Page
class AboutPage extends StatelessWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  AboutPage({required this.toggleTheme, required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;

    return Scaffold(
      drawer: AppDrawer(currentPage: 'about', isDarkMode: isDarkMode, toggleTheme: toggleTheme),
      appBar: AppBar(
        title: Text('About'),
        backgroundColor: isDarkMode ? Colors.teal : Colors.green,
        actions: [
          IconButton(
            icon: Icon(isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: toggleTheme,
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Security Analyzer by Drupadity',
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: textColor),
            ),
            const SizedBox(height: 10),
            Text(
              'This application is designed to help users easily analyze other apps. '
              'Its main purpose is to allow users to detect whether an application contains any harmful viruses or malware.',
              style: TextStyle(fontSize: 16, color: textColor),
            ),
            const SizedBox(height: 20),
            Text(
              'Main Feature:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: textColor),
            ),
            const SizedBox(height: 10),
            Text('- Malware scanning and analysis for applications', style: TextStyle(color: textColor)),
            const SizedBox(height: 20),
            Text(
              'Developers:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: textColor),
            ),
            const SizedBox(height: 10),
            Text('Drupadity Team - Universitas Jenderal Achmad Yani Yogyakarta', style: TextStyle(color: textColor)),
            const SizedBox(height: 10),
            Text('1. Handaru Darma Putra (222104004)', style: TextStyle(color: textColor)),
            Text('2. Muhammad Nasikh Afifuddin (222104009)', style: TextStyle(color: textColor)),
            Text('3. Ahmad Fazal (22210400)', style: TextStyle(color: textColor)),
            Text('4. Yerly Ania Saputri (222104002)', style: TextStyle(color: textColor)),
            Text('5. Ahmad Ansori (222104001)', style: TextStyle(color: textColor)),
            Text('6. Osok Rianto Hay (222104006)', style: TextStyle(color: textColor)),
            const SizedBox(height: 20),
            Text(
              'Application Version:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: textColor),
            ),
            Text('Version 1.0.0', style: TextStyle(color: textColor)),
            const SizedBox(height: 20),
            Text(
              'Contact / Feedback:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: textColor),
            ),
            Text('Email: Drupadity@gmail.com', style: TextStyle(color: textColor)),
          ],
        ),
      ),
    );
  }
}


// Halaman Setting
class SettingPage extends StatelessWidget {
  final VoidCallback toggleTheme;
  final bool isDarkMode;

  SettingPage({required this.toggleTheme, required this.isDarkMode});

  @override
  Widget build(BuildContext context) {
    Color textColor = isDarkMode ? Colors.white : Colors.black;

    return Scaffold(
      drawer: AppDrawer(currentPage: 'setting', isDarkMode: isDarkMode, toggleTheme: toggleTheme),
      appBar: AppBar(
        title: Text('Setting'),
        backgroundColor: isDarkMode ? Colors.teal : Colors.green,
        actions: [
          IconButton(
            icon: Icon(isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: toggleTheme,
          ),
        ],
      ),
      body: Center(
        child: Text('Pengaturan aplikasi', style: TextStyle(color: textColor)),
      ),
    );
  }
}
